import sqlite3
import os
from datetime import datetime
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.spinner import Spinner
from kivy.uix.scrollview import ScrollView
from kivy.core.window import Window

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
Window.size = (400, 600)


# =============================
# üóÉÔ∏è –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# =============================

def get_db_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bar_inventory.db')


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    db_path = get_db_path()
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: {db_path}")

    conn = sqlite3.connect(db_path)
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL
        )
    ''')

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    default_categories = [
        ("–í–∏—Å–∫–∏",), ("–í–æ–¥–∫–∞",), ("–†–æ–º",), ("–¢–µ–∫–∏–ª–∞",),
        ("–í–∏–Ω–æ",), ("–ü–∏–≤–æ",), ("–õ–∏–∫—ë—Ä",), ("–î—Ä—É–≥–æ–µ",)
    ]
    c.executemany("INSERT OR IGNORE INTO categories (name) VALUES (?)", default_categories)

    # –¢–∞–±–ª–∏—Ü–∞ –±—É—Ç—ã–ª–æ–∫ —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    c.execute('''
        CREATE TABLE IF NOT EXISTS bottles (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            empty_weight REAL NOT NULL,
            total_volume REAL NOT NULL,
            category_id INTEGER NOT NULL,
            FOREIGN KEY (category_id) REFERENCES categories(id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    c.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY,
            bottle_id INTEGER NOT NULL,
            timestamp TEXT NOT NULL,
            current_weight REAL NOT NULL,
            current_volume REAL NOT NULL,
            FOREIGN KEY (bottle_id) REFERENCES bottles(id)
        )
    ''')

    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    c.execute("CREATE INDEX IF NOT EXISTS idx_inventory_bottle_id ON inventory(bottle_id)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_inventory_timestamp ON inventory(timestamp)")

    conn.commit()
    conn.close()


def get_all_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: [(id, name), ...]"""
    db_path = get_db_path()
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute("SELECT id, name FROM categories ORDER BY name")
    categories = c.fetchall()
    conn.close()
    return categories


def get_all_bottles_with_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É—Ç—ã–ª–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: [(id, name, category_name), ...]"""
    db_path = get_db_path()
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute('''
        SELECT bottles.id, bottles.name, categories.name
        FROM bottles
        JOIN categories ON bottles.category_id = categories.id
        ORDER BY bottles.name
    ''')
    bottles = c.fetchall()
    conn.close()
    return bottles


def export_inventory_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ Excel-—Ñ–∞–π–ª 'inventory_export.xlsx' –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        from openpyxl import Workbook
        db_path = get_db_path()
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute('''
            SELECT inventory.timestamp, bottles.name, categories.name, inventory.current_volume 
            FROM inventory
            JOIN bottles ON inventory.bottle_id = bottles.id
            JOIN categories ON bottles.category_id = categories.id
            ORDER BY inventory.timestamp DESC
        ''')
        records = c.fetchall()
        conn.close()

        wb = Workbook()
        ws = wb.active
        ws.title = "–ò—Å—Ç–æ—Ä–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"
        ws.append(["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–±—ä—ë–º (–º–ª)"])

        for record in records:
            ws.append(record)

        export_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'inventory_export.xlsx')
        wb.save(export_path)

        return export_path

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
        return None


# =============================
# üß© –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================

def show_popup(title, message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    popup = Popup(
        title=title,
        content=Label(text=message, halign='center', valign='middle'),
        size_hint=(0.8, 0.3)
    )
    popup.open()


# =============================
# üñ•Ô∏è –≠–ö–†–ê–ù: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–£–¢–´–õ–ö–ò
# =============================

class AddBottleScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.name_input = TextInput(hint_text="–ù–∞–∑–≤–∞–Ω–∏–µ –±—É—Ç—ã–ª–∫–∏", multiline=False)
        self.empty_weight_input = TextInput(hint_text="–í–µ—Å –ø—É—Å—Ç–æ–π –±—É—Ç—ã–ª–∫–∏ (–≥)", multiline=False, input_filter='float')
        self.total_volume_input = TextInput(hint_text="–û–±—â–∏–π –æ–±—ä—ë–º –±—É—Ç—ã–ª–∫–∏ (–º–ª)", multiline=False, input_filter='float')

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = get_all_categories()
        category_names = [cat[1] for cat in categories]
        self.category_spinner = Spinner(text=category_names[0] if category_names else "–î—Ä—É–≥–æ–µ", values=category_names)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = Button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", size_hint_y=None, height=50)
        save_btn.bind(on_press=self.save_bottle)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        self.layout.add_widget(self.name_input)
        self.layout.add_widget(self.empty_weight_input)
        self.layout.add_widget(self.total_volume_input)
        self.layout.add_widget(Label(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", size_hint_y=None, height=30))
        self.layout.add_widget(self.category_spinner)
        self.layout.add_widget(save_btn)
        self.add_widget(self.layout)

    def save_bottle(self, instance):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –±—É—Ç—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            name = self.name_input.text.strip()
            empty_weight = float(self.empty_weight_input.text)
            total_volume = float(self.total_volume_input.text)

            if not name:
                show_popup("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É—Ç—ã–ª–∫–∏!")
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            selected_category_name = self.category_spinner.text
            categories = get_all_categories()
            category_id = next((cat[0] for cat in categories if cat[1] == selected_category_name), None)

            if category_id is None:
                show_popup("–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db_path = get_db_path()
            conn = sqlite3.connect(db_path)
            c = conn.cursor()
            c.execute(
                "INSERT INTO bottles (name, empty_weight, total_volume, category_id) VALUES (?, ?, ?, ?)",
                (name, empty_weight, total_volume, category_id)
            )
            conn.commit()
            conn.close()

            show_popup("–£—Å–ø–µ—Ö", "–ë—É—Ç—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            self.clear_inputs()

        except ValueError:
            show_popup("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –≤–µ—Å–∞ –∏ –æ–±—ä—ë–º–∞!")
        except Exception as e:
            show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {str(e)}")

    def clear_inputs(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        self.name_input.text = ""
        self.empty_weight_input.text = ""
        self.total_volume_input.text = ""


# =============================
# üìä –≠–ö–†–ê–ù: –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–Ø
# =============================

class InventoryScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
        self.bottle_id = None
        self.current_volume = None

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±–æ—Ä–∞
        self.layout.add_widget(Label(text="–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ç—ã–ª–∫—É:", size_hint_y=None, height=30))

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏–Ω–Ω–µ—Ä (—Å–Ω–∞—á–∞–ª–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏)
        self.bottle_spinner = self._create_bottle_spinner()
        self.layout.add_widget(self.bottle_spinner)

        # –í–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞
        self.current_weight_input = TextInput(
            hint_text="–¢–µ–∫—É—â–∏–π –≤–µ—Å –±—É—Ç—ã–ª–∫–∏ (–≥)",
            multiline=False,
            input_filter='float'
        )
        self.layout.add_widget(self.current_weight_input)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = BoxLayout(spacing=10, size_hint_y=None, height=50)
        calc_btn = Button(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä—ë–º")
        calc_btn.bind(on_press=self.calculate_volume)
        save_btn = Button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        save_btn.bind(on_press=self.save_result)
        delete_btn = Button(text="–£–¥–∞–ª–∏—Ç—å –±—É—Ç—ã–ª–∫—É", background_color=(1, 0, 0, 1))
        delete_btn.bind(on_press=self.delete_bottle)

        btn_layout.add_widget(calc_btn)
        btn_layout.add_widget(save_btn)
        btn_layout.add_widget(delete_btn)
        self.layout.add_widget(btn_layout)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = Label(text="–û–±—ä—ë–º: -- –º–ª", font_size=24)
        self.layout.add_widget(self.result_label)

        self.add_widget(self.layout)

    def on_enter(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É—Ç—ã–ª–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω."""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
        if hasattr(self, 'bottle_spinner') and self.bottle_spinner in self.layout.children:
            self.layout.remove_widget(self.bottle_spinner)
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        self.bottle_spinner = self._create_bottle_spinner()
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –º–µ—Å—Ç–æ ‚Äî –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ç—ã–ª–∫—É"
        # –ò–Ω–¥–µ–∫—Å: 1, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–π –≤–∏–¥–∂–µ—Ç ‚Äî —ç—Ç–æ Label "–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ç—ã–ª–∫—É"
        self.layout.add_widget(self.bottle_spinner, index=len(self.layout.children) - 4)

    def _create_bottle_spinner(self):
        """–°–æ–∑–¥–∞—ë—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –±—É—Ç—ã–ª–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        bottles = get_all_bottles_with_categories()
        if not bottles:
            return Spinner(text="–ù–µ—Ç –±—É—Ç—ã–ª–æ–∫", values=["–ù–µ—Ç –±—É—Ç—ã–ª–æ–∫"])

        values = [f"{b[0]} | {b[1]} ({b[2]})" for b in bottles]
        return Spinner(text=values[0], values=values)

    def calculate_volume(self, instance):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º –∂–∏–¥–∫–æ—Å—Ç–∏ –ø–æ –≤–µ—Å—É."""
        try:
            if self.bottle_spinner.text == "–ù–µ—Ç –±—É—Ç—ã–ª–æ–∫":
                show_popup("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—É—Ç—ã–ª–∫—É!")
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—É—Ç—ã–ª–∫–∏
            bottle_info = self.bottle_spinner.text.split(" | ")[0]
            bottle_id = int(bottle_info)

            current_weight = float(self.current_weight_input.text)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É—Ç—ã–ª–∫–∏
            db_path = get_db_path()
            conn = sqlite3.connect(db_path)
            c = conn.cursor()
            c.execute("SELECT empty_weight, total_volume FROM bottles WHERE id = ?", (bottle_id,))
            bottle_data = c.fetchone()
            conn.close()

            if not bottle_data:
                show_popup("–û—à–∏–±–∫–∞", "–ë—É—Ç—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            empty_weight, total_volume = bottle_data
            liquid_weight = current_weight - empty_weight
            current_volume = max(0, min(liquid_weight, total_volume))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

            self.result_label.text = f"–û–±—ä—ë–º: {round(current_volume, 1)} –º–ª"
            self.current_volume = current_volume
            self.bottle_id = bottle_id

        except ValueError:
            show_popup("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å!")
        except Exception as e:
            show_popup("–û—à–∏–±–∫–∞", f"–†–∞—Å—á—ë—Ç –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")

    def save_result(self, instance):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É."""
        if self.bottle_id is None or self.current_volume is None:
            show_popup("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—ä—ë–º!")
            return

        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            db_path = get_db_path()
            conn = sqlite3.connect(db_path)
            c = conn.cursor()
            c.execute(
                "INSERT INTO inventory (bottle_id, timestamp, current_weight, current_volume) VALUES (?, ?, ?, ?)",
                (self.bottle_id, timestamp, float(self.current_weight_input.text), self.current_volume)
            )
            conn.commit()
            conn.close()
            show_popup("–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        except Exception as e:
            show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {str(e)}")

    def delete_bottle(self, instance):
        """–£–¥–∞–ª—è–µ—Ç –±—É—Ç—ã–ª–∫—É –∏ –≤—Å—é –µ—ë –∏—Å—Ç–æ—Ä–∏—é (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)."""
        if self.bottle_spinner.text == "–ù–µ—Ç –±—É—Ç—ã–ª–æ–∫":
            show_popup("–û—à–∏–±–∫–∞", "–ù–µ—Ç –±—É—Ç—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return

        try:
            bottle_info = self.bottle_spinner.text.split(" | ")[0]
            bottle_id = int(bottle_info)
        except:
            show_popup("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ç—ã–ª–∫—É!")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        content = BoxLayout(orientation='vertical', padding=10)
        content.add_widget(Label(text="–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –±—É—Ç—ã–ª–∫—É\n–∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ –Ω–µ–π?"))

        btn_layout = BoxLayout(spacing=10)
        yes_btn = Button(text="–î–∞", size_hint_x=0.5, background_color=(1, 0, 0, 1))
        no_btn = Button(text="–ù–µ—Ç", size_hint_x=0.5)
        btn_layout.add_widget(yes_btn)
        btn_layout.add_widget(no_btn)
        content.add_widget(btn_layout)

        popup = Popup(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", content=content, size_hint=(0.8, 0.4))

        def on_yes(instance):
            try:
                db_path = get_db_path()
                conn = sqlite3.connect(db_path)
                c = conn.cursor()
                c.execute("DELETE FROM inventory WHERE bottle_id = ?", (bottle_id,))
                c.execute("DELETE FROM bottles WHERE id = ?", (bottle_id,))
                conn.commit()
                conn.close()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—É—Ç—ã–ª–æ–∫
                self.layout.remove_widget(self.bottle_spinner)
                self.bottle_spinner = self._create_bottle_spinner()
                self.layout.add_widget(self.bottle_spinner, index=len(self.layout.children) - 4)

                show_popup("–£—Å–ø–µ—Ö", "–ë—É—Ç—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                popup.dismiss()
            except Exception as e:
                show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {str(e)}")

        def on_no(instance):
            popup.dismiss()

        yes_btn.bind(on_press=on_yes)
        no_btn.bind(on_press=on_no)
        popup.open()


# =============================
# üìú –≠–ö–†–ê–ù: –ò–°–¢–û–†–ò–Ø + –≠–ö–°–ü–û–†–¢ –í EXCEL
# =============================

class HistoryScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=20)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∏
        top_panel = BoxLayout(size_hint_y=None, height=60, spacing=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_btn = Button(text="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", background_color=(1, 0, 0, 1))
        clear_btn.bind(on_press=self.clear_history)
        top_panel.add_widget(clear_btn)

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        export_btn = Button(text="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", background_color=(0, 0.5, 1, 1))
        export_btn.bind(on_press=self.export_to_excel)
        top_panel.add_widget(export_btn)

        self.layout.add_widget(top_panel)

        # ScrollView –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        scroll_view = ScrollView(size_hint=(1, 0.85))
        self.history_container = BoxLayout(orientation='vertical', spacing=5, size_hint_y=None)
        self.history_container.bind(minimum_height=self.history_container.setter('height'))
        scroll_view.add_widget(self.history_container)
        self.layout.add_widget(scroll_view)

        self.add_widget(self.layout)
        self.update_history()  # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é

    def on_enter(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω."""
        self.update_history()

    def update_history(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏."""
        self.history_container.clear_widgets()

        db_path = get_db_path()
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute('''
            SELECT inventory.timestamp, bottles.name, categories.name, inventory.current_volume 
            FROM inventory
            JOIN bottles ON inventory.bottle_id = bottles.id
            JOIN categories ON bottles.category_id = categories.id
            ORDER BY inventory.timestamp DESC
            LIMIT 100
        ''')
        records = c.fetchall()
        conn.close()

        if not records:
            self.history_container.add_widget(Label(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", size_hint_y=None, height=40))
            return

        for record in records:
            timestamp, name, category, volume = record
            entry = Label(
                text=f"{timestamp}\n{name} ({category}) ‚Äî {volume} –º–ª",
                size_hint_y=None,
                height=60,
                halign='left',
                valign='middle',
                text_size=(self.width - 40, None)
            )
            self.history_container.add_widget(entry)

    def clear_history(self, instance):
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)."""
        content = BoxLayout(orientation='vertical', padding=10)
        content.add_widget(Label(text="–£–¥–∞–ª–∏—Ç—å –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏?"))

        btn_layout = BoxLayout(spacing=10)
        yes_btn = Button(text="–î–∞", size_hint_x=0.5, background_color=(1, 0, 0, 1))
        no_btn = Button(text="–ù–µ—Ç", size_hint_x=0.5)
        btn_layout.add_widget(yes_btn)
        btn_layout.add_widget(no_btn)
        content.add_widget(btn_layout)

        popup = Popup(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏", content=content, size_hint=(0.8, 0.4))

        def on_yes(instance):
            try:
                db_path = get_db_path()
                conn = sqlite3.connect(db_path)
                c = conn.cursor()
                c.execute("DELETE FROM inventory")
                conn.commit()
                conn.close()
                self.update_history()
                show_popup("–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
                popup.dismiss()
            except Exception as e:
                show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å: {str(e)}")

        def on_no(instance):
            popup.dismiss()

        yes_btn.bind(on_press=on_yes)
        no_btn.bind(on_press=on_no)
        popup.open()

    def export_to_excel(self, instance):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ Excel-—Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
        export_path = export_inventory_to_excel()
        if export_path:
            show_popup("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{export_path}")
        else:
            show_popup("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel.")
            

# =============================
# üéÆ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================

class InventoryApp(App):
    def build(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —ç–∫—Ä–∞–Ω—ã + –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
        init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

        sm = ScreenManager()
        sm.add_widget(AddBottleScreen(name="add_bottle"))
        sm.add_widget(InventoryScreen(name="inventory"))
        sm.add_widget(HistoryScreen(name="history"))

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
        nav = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)

        def switch_screen(name):
            sm.current = name

        for screen_name in ["add_bottle", "inventory", "history"]:
            btn = Button(text=screen_name.replace("_", " ").title())
            btn.bind(on_press=lambda x, name=screen_name: switch_screen(name))
            nav.add_widget(btn)

        root = BoxLayout(orientation='vertical')
        root.add_widget(sm)
        root.add_widget(nav)
        return root


# =============================
# ‚ñ∂Ô∏è –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================

if __name__ == "__main__":
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    db_path = get_db_path()
    print("="*50)
    print(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print(f"–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {os.path.dirname(os.path.abspath(__file__))}")
    print("="*50)

    InventoryApp().run()