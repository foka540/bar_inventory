name: Build Android APK

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Добавляем переменную для управления версией кэша
env:
  CACHE_VERSION: v3 # Измените это значение, если нужно принудительно сбросить кэш

jobs:
  build-android-apk:
    runs-on: ubuntu-22.04
    timeout-minutes: 45

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          libffi-dev \
          libssl-dev \
          zlib1g-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libbz2-dev

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install Cython==0.29.36
        pip install buildozer

    - name: Ensure main.py exists
      run: |
        if [ ! -f "main.py" ]; then
          echo 'print("APK build successful - default main.py")' > main.py
          echo "::warning:: main.py was not found in the repository and has been created with a default print statement."
        fi

    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
          [app]
          title = Bar Inventory
          package.name = barinventory
          package.domain = org.example.barinventory

          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas,db,txt,csv

          version = 0.5
          # openpyxl удален
          requirements = python3,kivy,sqlite3

          android.api = 33
          android.minapi = 21
          android.ndk = 25b
          android.archs = arm64-v8a
          orientation = portrait
          android.accept_sdk_license = True
          android.permissions = INTERNET, WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE

          [buildozer]
          log_level = 2
          warn_on_root = 1
          EOF

    # --- КЭШИРОВАНИЕ ---
    # Обновленный ключ кэша с учетом CACHE_VERSION
    - name: Cache Buildozer Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer/android/platform/android-sdk
          ~/.buildozer/android/platform/android-ndk-r25b
          ~/.buildozer/android/platform/build-*
        key: buildozer-${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-${{ runner.os }}-${{ env.CACHE_VERSION }}-

    # --- ОЧИСТКА ПЕРЕД СБОРКОЙ (если кэш не помог) ---
    # Этот шаг выполнится, если предыдущий шаг кэширования не нашел подходящий кэш (cache miss)
    - name: Clean Build Environment (if no cache)
      if: steps.cache-buildozer.outputs.cache-hit != 'true'
      run: |
        echo "Cache miss. Cleaning build directories to ensure a fresh start."
        rm -rf .buildozer
        rm -rf bin

    # --- ПРИНУДИТЕЛЬНАЯ ПЕРЕСБОРКА KIVY ---
    # Добавляем флаг для принудительной пересборки kivy
    - name: Build APK
      run: |
        echo "::group::Buildozer Debug Build"
        # Используем --forcebuildkivy для принудительной пересборки, если нужно
        buildozer -v android debug
        echo "::endgroup::"

    # --- ЗАГРУЗКА РЕЗУЛЬТАТОВ ---
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: bar-inventory-apk-debug
        path: bin/*.apk
        if-no-files-found: ignore

    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          *.log
          .buildozer/android/platform/build-*/build/bootstrap_builds/sdl2/obj/local/arm64-v8a/*.log
          .buildozer/android/platform/build-*/build/other_builds/**/*log
        if-no-files-found: ignore
